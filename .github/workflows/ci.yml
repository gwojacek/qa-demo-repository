name: CI

on:
  push:
    branches: [master]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Which browser to test'
        required: false
        default: 'all'
        type: choice
        options: [all, chrome, opera]
      env_type:
        description: 'Environment to run tests against'
        required: true
        default: local
        type: choice
        options: [local, staging]

jobs:
  tests-chrome:
    name: Run tests - ${{ matrix.testblock }} - ${{ env.ENV_TYPE }} (Chrome)
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.browser == 'all' ||
      github.event.inputs.browser == 'chrome'
    env:
      ENV_TYPE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.env_type || 'local' }}
    strategy:
      fail-fast: false
      matrix:
        testblock: [ui, api]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: false

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Prepare environment file
        run: |
          if [ "${ENV_TYPE}" = "staging" ]; then
            echo "${{ secrets.LOCALCONF_STAGING_ENV }}" > localconf_staging.env
          else
            echo "${{ secrets.LOCALCONF_LOCAL_ENV }}" > localconf_local.env
          fi

      - name: Show context info
        run: |
          echo "Environment: $ENV_TYPE"
          echo "Browser: chrome"
          echo "Testblock: ${{ matrix.testblock }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Browser input: ${{ github.event.inputs.browser || 'all' }}"

      - name: Run Chrome tests
        run: ./run_tests.sh -b chrome -m "${{ matrix.testblock }}" -e $ENV_TYPE

      - name: Prepare report for GitHub Pages (Chrome)
        if: always()
        run: |
          mkdir -p out/chrome
          cp tests/artifacts/report.html out/chrome/index.html
          cp tests/artifacts/*.png out/chrome/

      - name: Publish Chrome HTML report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./out
          publish_branch: gh-pages
          keep_files: true

      - name: Show report URL (Chrome)
        if: always()
        run: |
          echo "::notice title=Report URL::https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/chrome/"

  tests-opera:
    name: Run tests - ${{ matrix.testblock }} - ${{ env.ENV_TYPE }} (Opera)
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.browser == 'all' ||
      github.event.inputs.browser == 'opera'
    env:
      ENV_TYPE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.env_type || 'local' }}
    strategy:
      fail-fast: false
      matrix:
        testblock: [ui, api]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: false

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Prepare environment file
        run: |
          if [ "${ENV_TYPE}" = "staging" ]; then
            echo "${{ secrets.LOCALCONF_STAGING_ENV }}" > localconf_staging.env
          else
            echo "${{ secrets.LOCALCONF_LOCAL_ENV }}" > localconf_local.env
          fi

      - name: Show context info
        run: |
          echo "Environment: $ENV_TYPE"
          echo "Browser: opera"
          echo "Testblock: ${{ matrix.testblock }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Browser input: ${{ github.event.inputs.browser || 'all' }}"

      - name: Run Opera tests
        run: ./run_tests.sh -b opera -m "${{ matrix.testblock }}" -e $ENV_TYPE

      - name: Prepare report for GitHub Pages (Opera)
        if: always()
        run: |
          mkdir -p out/opera
          cp tests/artifacts/report.html out/opera/index.html
          cp tests/artifacts/*.png out/opera/

      - name: Publish Opera HTML report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./out
          publish_branch: gh-pages
          keep_files: true

      - name: Show report URL (Opera)
        if: always()
        run: |
          echo "::notice title=Report URL::https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/opera/"
