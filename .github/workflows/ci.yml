name: CI
run-name: >-
  CI - ${{ github.event_name == 'push' && github.event.head_commit.message
    || github.event_name == 'schedule' && 'Cron CI'
    || format('Manually triggered on {0}', github.event.inputs.browser || 'all') }}
  (${{ github.event_name == 'workflow_dispatch' && github.event.inputs.env_type || 'local' }})
on:
  push:
    branches: [master]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Which browser to test'
        required: false
        default: 'all'
        type: choice
        options: [all, chrome, opera]
      env_type:
        description: 'Test environment'
        required: false
        default: 'local'
        type: choice
        options: [local, staging]

env:
  # Resolve environment for all jobs and steps
  ENV_TYPE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.env_type || 'local' }}

jobs:

  # ---- Chrome tests ----
  tests-chrome:
    name: ${{ matrix.testblock }} (Chrome)
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.browser == 'all' ||
      github.event.inputs.browser == 'chrome'
    strategy:
      fail-fast: false
      matrix:
        testblock:
          - ui
          - api
          - usertests
          - cart
          - shopping_modal
          - product_details

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: false

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Prepare environment file
        run: |
          if [ "${ENV_TYPE}" = "staging" ]; then
            echo "${{ secrets.LOCALCONF_STAGING_ENV }}" > localconf_staging.env
          else
            echo "${{ secrets.LOCALCONF_LOCAL_ENV }}" > localconf_local.env
          fi

      - name: Show test context
        run: |
          echo "Running on ${{ matrix.testblock }} | Environment: $ENV_TYPE | Browser: chrome"

      - name: Run ${{ matrix.testblock }} tests (Chrome)
        run: ./run_tests.sh -b chrome -m ${{ matrix.testblock }} -e $ENV_TYPE

      - name: Prepare report for GitHub Pages (Chrome)
        if: always()
        run: |
          DIR=out/chrome/${{ matrix.testblock }}
          mkdir -p "$DIR"
          cp tests/artifacts/report.html "$DIR/index.html"
          if ls tests/artifacts/*.png >/dev/null 2>&1; then
            cp tests/artifacts/*.png "$DIR/"
          fi

      - name: Upload Chrome report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: chrome-${{ matrix.testblock }}-report
          path: out


      - name: Show report URL (Chrome)
        if: always()
        run: |
          echo "::notice title=Report URL::https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/chrome/${{ matrix.testblock }}/"

      - name: Add environment info to workflow summary
        if: always()
        run: |
          echo "#### [${{ matrix.testblock }} (Chrome)] Environment: \`${ENV_TYPE}\`" >> $GITHUB_STEP_SUMMARY

  # ---- Opera tests ----
  tests-opera:
    name: ${{ matrix.testblock }} (Opera)
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.browser == 'all' ||
      github.event.inputs.browser == 'opera'
    strategy:
      fail-fast: false
      matrix:
        testblock:
          - ui
          - api
          - usertests
          - cart
          - shopping_modal
          - product_details

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: false

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Prepare environment file
        run: |
          if [ "${ENV_TYPE}" = "staging" ]; then
            echo "${{ secrets.LOCALCONF_STAGING_ENV }}" > localconf_staging.env
          else
            echo "${{ secrets.LOCALCONF_LOCAL_ENV }}" > localconf_local.env
          fi

      - name: Show test context
        run: |
          echo "Running on ${{ matrix.testblock }} | Environment: $ENV_TYPE | Browser: opera"

      - name: Run ${{ matrix.testblock }} tests (Opera)
        run: ./run_tests.sh -b opera -m ${{ matrix.testblock }} -e $ENV_TYPE

      - name: Prepare report for GitHub Pages (Opera)
        if: always()
        run: |
          DIR=out/opera/${{ matrix.testblock }}
          mkdir -p "$DIR"
          cp tests/artifacts/report.html "$DIR/index.html"
          if ls tests/artifacts/*.png >/dev/null 2>&1; then
            cp tests/artifacts/*.png "$DIR/"
          fi

      - name: Upload Opera report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: opera-${{ matrix.testblock }}-report
          path: out


      - name: Show report URL (Opera)
        if: always()
        run: |
          echo "::notice title=Report URL::https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/opera/${{ matrix.testblock }}/"

      - name: Add environment info to workflow summary
        if: always()
        run: |
          echo "#### [${{ matrix.testblock }} (Opera)] Environment: \`${ENV_TYPE}\`" >> $GITHUB_STEP_SUMMARY

  publish-reports:
    name: Publish all reports to GitHub Pages
    runs-on: ubuntu-latest
    needs: [tests-chrome, tests-opera]
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: out
          merge-multiple: true


      - name: Publish HTML reports
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./out
          publish_branch: gh-pages
          keep_files: true
          force: true

      - name: Show report URLs
        run: |
          for p in $(find out -mindepth 2 -maxdepth 2 -type d); do
            rel=${p#out/}
            echo "::notice title=Report URL::https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$rel/"
          done
